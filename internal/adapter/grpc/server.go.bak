package grpc

import (
	"context"
	"fmt"
	"net"
	"warpin/smtp/internal/usecase"
	"warpin/smtp/internal/usecase/port"
	"warpin/smtp/pkg/domain"

	empty "github.com/golang/protobuf/ptypes/empty"
	"google.golang.org/grpc"
)

type server struct {
	gui usecase.GetUserInboxs
	dui usecase.DeleteUserInbox
	aui usecase.AddUserInbox
}

func (s *server) GetUserInboxs(ctx context.Context, req *domain.GetUserInboxsReq) (resp *domain.GetUserInboxsResp, err error) {
	return s.gui(ctx, req.GetUserId())
}

func (s *server) AddUserInbox(ctx context.Context, req *domain.AddUserInboxReq) (resp *domain.AddUserInboxResp, err error) {
	return s.aui(ctx, req.GetUserId())
}

func (s *server) DeleteUserInbox(ctx context.Context, req *domain.DeleteUserInboxReq) (resp *empty.Empty, err error) {
	err = s.dui(ctx, req.GetUserId(), req.GetInboxName())
	if err != nil {
		return
	}
	resp = &empty.Empty{}
	return
}

func NewServer(sPort int, gui usecase.GetUserInboxs, dui usecase.DeleteUserInbox, aui usecase.AddUserInbox, le port.LogError) (port.Serve, port.GracefulStop) {
	lis, err := net.Listen("tcp", fmt.Sprintf(":%d", sPort))
	if err != nil {
		panic(err)
	}
	svc := &server{
		gui: gui,
		aui: aui,
		dui: dui,
	}
	s := grpc.NewServer()
	domain.RegisterSmtpServiceServer(s, svc)
	return func() {
			fmt.Println("running at", lis.Addr().String())
			err = s.Serve(lis)
			if err != nil {
				le(context.Background(), port.Fields{
					"address": lis.Addr().String(),
				}, err.Error())
			}
		}, func() {
			s.GracefulStop()
		}
}
